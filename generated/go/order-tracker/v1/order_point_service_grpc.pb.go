// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: order-tracker/v1/order_point_service.proto

package ordersv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderPointService_ListOrderPoints_FullMethodName  = "/orders.v1.OrderPointService/ListOrderPoints"
	OrderPointService_GetOrderPoint_FullMethodName    = "/orders.v1.OrderPointService/GetOrderPoint"
	OrderPointService_CreateOrderPoint_FullMethodName = "/orders.v1.OrderPointService/CreateOrderPoint"
	OrderPointService_UpdateOrderPoint_FullMethodName = "/orders.v1.OrderPointService/UpdateOrderPoint"
	OrderPointService_DeleteOrderPoint_FullMethodName = "/orders.v1.OrderPointService/DeleteOrderPoint"
)

// OrderPointServiceClient is the client API for OrderPointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderPointServiceClient interface {
	ListOrderPoints(ctx context.Context, in *ListOrderPointsRequest, opts ...grpc.CallOption) (*ListOrderPointsResponse, error)
	GetOrderPoint(ctx context.Context, in *GetOrderPointRequest, opts ...grpc.CallOption) (*OrderPoint, error)
	CreateOrderPoint(ctx context.Context, in *CreateOrderPointRequest, opts ...grpc.CallOption) (*OrderPoint, error)
	UpdateOrderPoint(ctx context.Context, in *UpdateOrderPointRequest, opts ...grpc.CallOption) (*OrderPoint, error)
	DeleteOrderPoint(ctx context.Context, in *DeleteOrderPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type orderPointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderPointServiceClient(cc grpc.ClientConnInterface) OrderPointServiceClient {
	return &orderPointServiceClient{cc}
}

func (c *orderPointServiceClient) ListOrderPoints(ctx context.Context, in *ListOrderPointsRequest, opts ...grpc.CallOption) (*ListOrderPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrderPointsResponse)
	err := c.cc.Invoke(ctx, OrderPointService_ListOrderPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderPointServiceClient) GetOrderPoint(ctx context.Context, in *GetOrderPointRequest, opts ...grpc.CallOption) (*OrderPoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderPoint)
	err := c.cc.Invoke(ctx, OrderPointService_GetOrderPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderPointServiceClient) CreateOrderPoint(ctx context.Context, in *CreateOrderPointRequest, opts ...grpc.CallOption) (*OrderPoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderPoint)
	err := c.cc.Invoke(ctx, OrderPointService_CreateOrderPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderPointServiceClient) UpdateOrderPoint(ctx context.Context, in *UpdateOrderPointRequest, opts ...grpc.CallOption) (*OrderPoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderPoint)
	err := c.cc.Invoke(ctx, OrderPointService_UpdateOrderPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderPointServiceClient) DeleteOrderPoint(ctx context.Context, in *DeleteOrderPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderPointService_DeleteOrderPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderPointServiceServer is the server API for OrderPointService service.
// All implementations must embed UnimplementedOrderPointServiceServer
// for forward compatibility.
type OrderPointServiceServer interface {
	ListOrderPoints(context.Context, *ListOrderPointsRequest) (*ListOrderPointsResponse, error)
	GetOrderPoint(context.Context, *GetOrderPointRequest) (*OrderPoint, error)
	CreateOrderPoint(context.Context, *CreateOrderPointRequest) (*OrderPoint, error)
	UpdateOrderPoint(context.Context, *UpdateOrderPointRequest) (*OrderPoint, error)
	DeleteOrderPoint(context.Context, *DeleteOrderPointRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedOrderPointServiceServer()
}

// UnimplementedOrderPointServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderPointServiceServer struct{}

func (UnimplementedOrderPointServiceServer) ListOrderPoints(context.Context, *ListOrderPointsRequest) (*ListOrderPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrderPoints not implemented")
}
func (UnimplementedOrderPointServiceServer) GetOrderPoint(context.Context, *GetOrderPointRequest) (*OrderPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderPoint not implemented")
}
func (UnimplementedOrderPointServiceServer) CreateOrderPoint(context.Context, *CreateOrderPointRequest) (*OrderPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderPoint not implemented")
}
func (UnimplementedOrderPointServiceServer) UpdateOrderPoint(context.Context, *UpdateOrderPointRequest) (*OrderPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderPoint not implemented")
}
func (UnimplementedOrderPointServiceServer) DeleteOrderPoint(context.Context, *DeleteOrderPointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderPoint not implemented")
}
func (UnimplementedOrderPointServiceServer) mustEmbedUnimplementedOrderPointServiceServer() {}
func (UnimplementedOrderPointServiceServer) testEmbeddedByValue()                           {}

// UnsafeOrderPointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderPointServiceServer will
// result in compilation errors.
type UnsafeOrderPointServiceServer interface {
	mustEmbedUnimplementedOrderPointServiceServer()
}

func RegisterOrderPointServiceServer(s grpc.ServiceRegistrar, srv OrderPointServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderPointServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderPointService_ServiceDesc, srv)
}

func _OrderPointService_ListOrderPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderPointServiceServer).ListOrderPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderPointService_ListOrderPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderPointServiceServer).ListOrderPoints(ctx, req.(*ListOrderPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderPointService_GetOrderPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderPointServiceServer).GetOrderPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderPointService_GetOrderPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderPointServiceServer).GetOrderPoint(ctx, req.(*GetOrderPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderPointService_CreateOrderPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderPointServiceServer).CreateOrderPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderPointService_CreateOrderPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderPointServiceServer).CreateOrderPoint(ctx, req.(*CreateOrderPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderPointService_UpdateOrderPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderPointServiceServer).UpdateOrderPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderPointService_UpdateOrderPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderPointServiceServer).UpdateOrderPoint(ctx, req.(*UpdateOrderPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderPointService_DeleteOrderPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderPointServiceServer).DeleteOrderPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderPointService_DeleteOrderPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderPointServiceServer).DeleteOrderPoint(ctx, req.(*DeleteOrderPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderPointService_ServiceDesc is the grpc.ServiceDesc for OrderPointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderPointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orders.v1.OrderPointService",
	HandlerType: (*OrderPointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrderPoints",
			Handler:    _OrderPointService_ListOrderPoints_Handler,
		},
		{
			MethodName: "GetOrderPoint",
			Handler:    _OrderPointService_GetOrderPoint_Handler,
		},
		{
			MethodName: "CreateOrderPoint",
			Handler:    _OrderPointService_CreateOrderPoint_Handler,
		},
		{
			MethodName: "UpdateOrderPoint",
			Handler:    _OrderPointService_UpdateOrderPoint_Handler,
		},
		{
			MethodName: "DeleteOrderPoint",
			Handler:    _OrderPointService_DeleteOrderPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order-tracker/v1/order_point_service.proto",
}
