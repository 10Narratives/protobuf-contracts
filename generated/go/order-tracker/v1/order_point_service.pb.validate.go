// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order-tracker/v1/order_point_service.proto

package ordersv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrderPoint with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderPoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderPoint with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderPointMultiError, or
// nil if none found.
func (m *OrderPoint) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderPoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if l := utf8.RuneCountInString(m.GetDisplayName()); l < 2 || l > 100 {
		err := OrderPointValidationError{
			field:  "DisplayName",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_OrderPoint_DisplayName_Pattern.MatchString(m.GetDisplayName()) {
		err := OrderPointValidationError{
			field:  "DisplayName",
			reason: "value does not match regex pattern \"^[^\\\\x00-\\\\x1f\\\\x7f]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderPointValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderPointValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderPointValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderPointValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderPointValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderPointValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderPointValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderPointValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderPointValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if len(errors) > 0 {
		return OrderPointMultiError(errors)
	}

	return nil
}

// OrderPointMultiError is an error wrapping multiple validation errors
// returned by OrderPoint.ValidateAll() if the designated constraints aren't met.
type OrderPointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderPointMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderPointMultiError) AllErrors() []error { return m }

// OrderPointValidationError is the validation error returned by
// OrderPoint.Validate if the designated constraints aren't met.
type OrderPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderPointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderPointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderPointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderPointValidationError) ErrorName() string { return "OrderPointValidationError" }

// Error satisfies the builtin error interface
func (e OrderPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderPointValidationError{}

var _OrderPoint_DisplayName_Pattern = regexp.MustCompile("^[^\\x00-\\x1f\\x7f]+$")

// Validate checks the field values on ListOrderPointsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrderPointsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderPointsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrderPointsRequestMultiError, or nil if none found.
func (m *ListOrderPointsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderPointsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOrderPointsRequestMultiError(errors)
	}

	return nil
}

// ListOrderPointsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrderPointsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrderPointsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderPointsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderPointsRequestMultiError) AllErrors() []error { return m }

// ListOrderPointsRequestValidationError is the validation error returned by
// ListOrderPointsRequest.Validate if the designated constraints aren't met.
type ListOrderPointsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderPointsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderPointsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderPointsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderPointsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderPointsRequestValidationError) ErrorName() string {
	return "ListOrderPointsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrderPointsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderPointsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderPointsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderPointsRequestValidationError{}

// Validate checks the field values on ListOrderPointsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrderPointsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderPointsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrderPointsResponseMultiError, or nil if none found.
func (m *ListOrderPointsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderPointsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrderPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrderPointsResponseValidationError{
						field:  fmt.Sprintf("OrderPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrderPointsResponseValidationError{
						field:  fmt.Sprintf("OrderPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrderPointsResponseValidationError{
					field:  fmt.Sprintf("OrderPoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListOrderPointsResponseMultiError(errors)
	}

	return nil
}

// ListOrderPointsResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrderPointsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrderPointsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderPointsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderPointsResponseMultiError) AllErrors() []error { return m }

// ListOrderPointsResponseValidationError is the validation error returned by
// ListOrderPointsResponse.Validate if the designated constraints aren't met.
type ListOrderPointsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderPointsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderPointsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderPointsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderPointsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderPointsResponseValidationError) ErrorName() string {
	return "ListOrderPointsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrderPointsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderPointsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderPointsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderPointsResponseValidationError{}

// Validate checks the field values on GetOrderPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderPointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderPointRequestMultiError, or nil if none found.
func (m *GetOrderPointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderPointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetOrderPointRequestMultiError(errors)
	}

	return nil
}

// GetOrderPointRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderPointRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderPointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderPointRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderPointRequestMultiError) AllErrors() []error { return m }

// GetOrderPointRequestValidationError is the validation error returned by
// GetOrderPointRequest.Validate if the designated constraints aren't met.
type GetOrderPointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderPointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderPointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderPointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderPointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderPointRequestValidationError) ErrorName() string {
	return "GetOrderPointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderPointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderPointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderPointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderPointRequestValidationError{}

// Validate checks the field values on CreateOrderPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderPointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderPointRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderPointRequestMultiError, or nil if none found.
func (m *CreateOrderPointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderPointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderPointId

	if all {
		switch v := interface{}(m.GetOrderPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderPointRequestValidationError{
					field:  "OrderPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderPointRequestValidationError{
					field:  "OrderPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderPointRequestValidationError{
				field:  "OrderPoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrderPointRequestMultiError(errors)
	}

	return nil
}

// CreateOrderPointRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrderPointRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderPointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderPointRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderPointRequestMultiError) AllErrors() []error { return m }

// CreateOrderPointRequestValidationError is the validation error returned by
// CreateOrderPointRequest.Validate if the designated constraints aren't met.
type CreateOrderPointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderPointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderPointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderPointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderPointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderPointRequestValidationError) ErrorName() string {
	return "CreateOrderPointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderPointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderPointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderPointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderPointRequestValidationError{}

// Validate checks the field values on UpdateOrderPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderPointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderPointRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderPointRequestMultiError, or nil if none found.
func (m *UpdateOrderPointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderPointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrderPointRequestValidationError{
					field:  "OrderPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrderPointRequestValidationError{
					field:  "OrderPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrderPointRequestValidationError{
				field:  "OrderPoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrderPointRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrderPointRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrderPointRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrderPointRequestMultiError(errors)
	}

	return nil
}

// UpdateOrderPointRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderPointRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderPointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderPointRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderPointRequestMultiError) AllErrors() []error { return m }

// UpdateOrderPointRequestValidationError is the validation error returned by
// UpdateOrderPointRequest.Validate if the designated constraints aren't met.
type UpdateOrderPointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderPointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderPointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderPointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderPointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderPointRequestValidationError) ErrorName() string {
	return "UpdateOrderPointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderPointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderPointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderPointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderPointRequestValidationError{}

// Validate checks the field values on DeleteOrderPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrderPointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrderPointRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrderPointRequestMultiError, or nil if none found.
func (m *DeleteOrderPointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrderPointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteOrderPointRequestMultiError(errors)
	}

	return nil
}

// DeleteOrderPointRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrderPointRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrderPointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrderPointRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrderPointRequestMultiError) AllErrors() []error { return m }

// DeleteOrderPointRequestValidationError is the validation error returned by
// DeleteOrderPointRequest.Validate if the designated constraints aren't met.
type DeleteOrderPointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrderPointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrderPointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrderPointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrderPointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrderPointRequestValidationError) ErrorName() string {
	return "DeleteOrderPointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrderPointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrderPointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrderPointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrderPointRequestValidationError{}

// Validate checks the field values on OrderPoint_Address with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderPoint_Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderPoint_Address with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderPoint_AddressMultiError, or nil if none found.
func (m *OrderPoint_Address) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderPoint_Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPostalCode()) != 6 {
		err := OrderPoint_AddressValidationError{
			field:  "PostalCode",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if !_OrderPoint_Address_PostalCode_Pattern.MatchString(m.GetPostalCode()) {
		err := OrderPoint_AddressValidationError{
			field:  "PostalCode",
			reason: "value does not match regex pattern \"^[0-9]{6}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_OrderPoint_Address_CountryCode_Pattern.MatchString(m.GetCountryCode()) {
		err := OrderPoint_AddressValidationError{
			field:  "CountryCode",
			reason: "value does not match regex pattern \"^[A-Z]{2}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRegion()); l < 2 || l > 100 {
		err := OrderPoint_AddressValidationError{
			field:  "Region",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetLocality()); l < 2 || l > 100 {
		err := OrderPoint_AddressValidationError{
			field:  "Locality",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMunicipalDistrict()) > 100 {
		err := OrderPoint_AddressValidationError{
			field:  "MunicipalDistrict",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetStreet()); l < 2 || l > 100 {
		err := OrderPoint_AddressValidationError{
			field:  "Street",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetBuilding()); l < 1 || l > 20 {
		err := OrderPoint_AddressValidationError{
			field:  "Building",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_OrderPoint_Address_Building_Pattern.MatchString(m.GetBuilding()) {
		err := OrderPoint_AddressValidationError{
			field:  "Building",
			reason: "value does not match regex pattern \"^[0-9a-zA-Zа-яА-Я\\\\-\\\\/\\\\.,\\\\s]{1,20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApartment()) > 20 {
		err := OrderPoint_AddressValidationError{
			field:  "Apartment",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_OrderPoint_Address_Apartment_Pattern.MatchString(m.GetApartment()) {
		err := OrderPoint_AddressValidationError{
			field:  "Apartment",
			reason: "value does not match regex pattern \"^[0-9a-zA-Zа-яА-Я\\\\-\\\\/\\\\.,\\\\s]{0,20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderPoint_AddressMultiError(errors)
	}

	return nil
}

// OrderPoint_AddressMultiError is an error wrapping multiple validation errors
// returned by OrderPoint_Address.ValidateAll() if the designated constraints
// aren't met.
type OrderPoint_AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderPoint_AddressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderPoint_AddressMultiError) AllErrors() []error { return m }

// OrderPoint_AddressValidationError is the validation error returned by
// OrderPoint_Address.Validate if the designated constraints aren't met.
type OrderPoint_AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderPoint_AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderPoint_AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderPoint_AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderPoint_AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderPoint_AddressValidationError) ErrorName() string {
	return "OrderPoint_AddressValidationError"
}

// Error satisfies the builtin error interface
func (e OrderPoint_AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderPoint_Address.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderPoint_AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderPoint_AddressValidationError{}

var _OrderPoint_Address_PostalCode_Pattern = regexp.MustCompile("^[0-9]{6}$")

var _OrderPoint_Address_CountryCode_Pattern = regexp.MustCompile("^[A-Z]{2}$")

var _OrderPoint_Address_Building_Pattern = regexp.MustCompile("^[0-9a-zA-Zа-яА-Я\\-\\/\\.,\\s]{1,20}$")

var _OrderPoint_Address_Apartment_Pattern = regexp.MustCompile("^[0-9a-zA-Zа-яА-Я\\-\\/\\.,\\s]{0,20}$")
